name: Selenoid Tests Workflow

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Pull browser images
      run: |
        docker pull selenoid/chrome:120.0  # Используем стабильную версию
        docker pull aerokube/selenoid:latest-release

    - name: Prepare Selenoid config
      run: |
        mkdir -p selenoid-config
        echo '{
          "chrome": {
            "default": "120.0",
            "versions": {
              "120.0": {
                "image": "selenoid/chrome:120.0",
                "port": "4444",
                "path": "/",
                "env": ["TZ=UTC"],
                "volumes": ["/tmp:/tmp"]
              }
            }
          }
        }' > selenoid-config/browsers.json

    - name: Start Selenoid
      run: |
        docker run -d --name selenoid \
          -p 4444:4444 \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/selenoid-config:/etc/selenoid \
          -v /tmp:/tmp \
          aerokube/selenoid:latest-release \
          -limit 5 -timeout 5m
        
        echo "Waiting for Selenoid to start..."
        sleep 15
        curl -v http://localhost:4444/status

    - name: Prepare test assets
      run: |
        # Создаем тестовое изображение в /tmp (доступно в контейнере Selenoid)
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAFCAH/l8iGQAAAAABJRU5ErkJggg==" | base64 -d > /tmp/картинка.png
        file /tmp/картинка.png
        ls -la /tmp/картинка.png
        
    - name: Run tests
      run: |
        python -m pytest --alluredir=allure-results -v
      env:
        SELENOID_ENABLED: "true"

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: allure-results/

    - name: Clean up
      if: always()
      run: |
        docker stop selenoid || true
        docker rm selenoid || true



# name: Selenoid Tests Workflow

# on:
#   push:
#     branches: [main]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30

#     services:
#       selenoid:
#         image: aerokube/selenoid:latest-release
#         ports:
#           - 4444:4444
#         volumes:
#           - /var/run/docker.sock:/var/run/docker.sock
#           - ./selenoid-config:/etc/selenoid
#         env:
#           OVERRIDE_VIDEO_OUTPUT_DIR: /tmp/video
#         options: >-
#           --health-cmd "curl -f http://localhost:4444/status || exit 1"
#           --health-interval 5s
#           --health-timeout 2s
#           --health-retries 5

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.9'
        
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install pytest-timeout  # Добавляем плагин для таймаутов

#     - name: Prepare Selenoid config
#       run: |
#         mkdir -p selenoid-config
#         echo '{
#           "chrome": {
#             "default": "120.0",
#             "versions": {
#               "120.0": {
#                 "image": "selenoid/chrome:120.0",
#                 "port": "4444",
#                 "path": "/",
#                 "env": ["TZ=UTC"],
#                 "volumes": ["/tmp:/tmp"],
#                 "tmpfs": {"/tmp": "size=512m"}
#               }
#             }
#           }
#         }' > selenoid-config/browsers.json

#     - name: Pull browser images
#       run: |
#         docker pull selenoid/chrome:120.0
#         docker pull selenoid/video-recorder:latest-release

#     - name: Wait for Selenoid
#       run: |
#         echo "Waiting for Selenoid to become healthy..."
#         for i in {1..10}; do
#           if curl -s http://localhost:4444/status | grep -q '"total":1'; then
#             echo "Selenoid is ready!"
#             exit 0
#           fi
#           sleep 3
#         done
#         echo "Selenoid failed to start"
#         exit 1

#     - name: Run tests with retries
#       run: |
#         python -m pytest \
#           --alluredir=allure-results \
#           --reruns 3 \  # Перезапускать упавшие тесты до 3 раз
#           --reruns-delay 5 \  # С задержкой 5 секунд между попытками
#           -v
#       env:
#         SELENOID_ENABLED: "true"
#         SELENOID_TIMEOUT: "60s"

#     - name: Upload results
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: test-results
#         path: allure-results/